<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	version="3.0">
	<context-param>
		<param-name>webAppRootKey</param-name>
		<param-value>ssm_demo.root</param-value>
	</context-param>

	<filter>
		<filter-name>characterEncodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>characterEncodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- 日志config -->
	<context-param>
		<param-name>log4jConfigLocation</param-name>
		<param-value>classpath:log4j.properties</param-value>
	</context-param>
	<context-param>
		<param-name>log4jRefreshInterval</param-name>
		<param-value>60000</param-value>
	</context-param>
	<listener>
		<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
	</listener>

	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath*:spring/applicationContext.xml</param-value>
	</context-param>

	<listener>
		<listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
	</listener>


	<!-- <servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.css</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.xml</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.swf</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.zip</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.gif</url-pattern>
	</servlet-mapping>

	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.jpg</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.png</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.js</url-pattern>
	</servlet-mapping> -->

	<!--如果你的DispatcherServlet拦截"/"，为了实现REST风格，拦截了所有的请求，那么同时对*.js,*.jpg等静态文件的访问也就被拦截了。 -->
	<!--方案一：激活Tomcat的defaultServlet来处理静态文件 -->
	<!--要写在DispatcherServlet的前面， 让 defaultServlet先拦截请求，这样请求就不会进入Spring了 -->
	<!-- Tomcat, Jetty, JBoss, and GlassFish 默认 Servlet的名字 "default" Resin 默认 
		Servlet的名字 "resin-file" WebLogic 默认 Servlet的名字 "FileServlet" WebSphere 默认 
		Servlet的名字 "SimpleFileServlet" -->
	<!-- <servlet-mapping> <servlet-name>default</servlet-name> <url-pattern>*.css</url-pattern> 
		<url-pattern>*.swf</url-pattern> <url-pattern>*.gif</url-pattern> <url-pattern>*.jpg</url-pattern> 
		<url-pattern>*.png</url-pattern> <url-pattern>*.js</url-pattern> <url-pattern>*.html</url-pattern> 
		<url-pattern>*.xml</url-pattern> <url-pattern>*.json</url-pattern> <url-pattern>*.map</url-pattern> 
		<url-pattern>/js/*</url-pattern> <url-pattern>/css/*</url-pattern> <url-pattern>/images/*</url-pattern> 
		<url-pattern>/fonts/*</url-pattern> </servlet-mapping> -->

	<!--使用Spring MVC,配置DispatcherServlet是第一步。DispatcherServlet是一个Servlet,,所以可以配置多个DispatcherServlet -->
	<!--DispatcherServlet是前置控制器，配置在web.xml文件中的。拦截匹配的请求，Servlet拦截匹配规则要自已定义，把拦截下来的请求，依据某某规则分发到目标Controller(我们写的Action)来处理。 -->
	<servlet>
		<servlet-name>springMVC</servlet-name>
		<!--在DispatcherServlet的初始化过程中，框架会在web应用的 WEB-INF文件夹下寻找名为[servlet-name]-servlet.xml 
			的配置文件，生成文件中定义的bean。 -->
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<!--指明了配置文件的文件名，不使用默认配置文件名，而使用dispatcher-servlet.xml配置文件。 -->
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<!--其中<param-value>**.xml</param-value> 这里可以使用多种写法 -->
			<!--1、不写,使用默认值:/WEB-INF/<servlet-name>-servlet.xml -->
			<!--2、<param-value>/WEB-INF/classes/dispatcher-servlet.xml</param-value> -->
			<!--3、<param-value>classpath*:dispatcher-servlet.xml</param-value> -->
			<!--4、多个值用逗号分隔 -->
			<param-value>classpath*:spring/springMVC-servlet</param-value>
		</init-param>
		<!--是启动顺序，让这个Servlet随Servletp容器一起启动。 -->
		<load-on-startup>1</load-on-startup>
	</servlet>

	<servlet-mapping>
		<servlet-name>springMVC</servlet-name>
		<!--会拦截URL中带“/”的请求。 -->
		<url-pattern>/</url-pattern>
	</servlet-mapping>

	<!--指定欢迎页面 -->
	<welcome-file-list>
		<welcome-file>index.html</welcome-file>
	</welcome-file-list>
	<!--当系统出现404错误，跳转到页面nopage.html -->
	<!-- <error-page> <error-code>404</error-code> <location>/**/404.html</location> 
		</error-page> 当系统出现java.lang.NullPointerException，跳转到页面error.html <error-page> 
		<exception-type>java.lang.NullPointerException</exception-type> <location>/**/500.html</location> 
		</error-page> <session-config>会话超时配置，单位分钟 <session-timeout>60</session-timeout> 
		</session-config> -->

</web-app>